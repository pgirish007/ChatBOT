import React, { useState } from "react";
import { Pie, Bar, Doughnut } from "react-chartjs-2";
import { Chart as ChartJS, ArcElement, BarElement, CategoryScale, LinearScale, Tooltip, Legend } from "chart.js";

ChartJS.register(ArcElement, BarElement, CategoryScale, LinearScale, Tooltip, Legend);

function VulnerabilityChart({ data }) {
  const [chartType, setChartType] = useState("Pie");

  const severityCounts = data.reduce(
    (acc, vuln) => {
      acc[vuln.severity] = (acc[vuln.severity] || 0) + 1;
      return acc;
    },
    { Critical: 0, High: 0, Medium: 0, Low: 0 }
  );

  const chartData = {
    labels: ["Critical", "High", "Medium", "Low"],
    datasets: [
      {
        label: "# of Vulnerabilities",
        data: [
          severityCounts.Critical,
          severityCounts.High,
          severityCounts.Medium,
          severityCounts.Low,
        ],
        backgroundColor: ["#FF6384", "#FFCE56", "#36A2EB", "#4BC0C0"],
      },
    ],
  };

  const barChartOptions = {
    scales: {
      y: { beginAtZero: true },
    },
  };

  const renderChart = () => {
    switch (chartType) {
      case "Bar":
        return <Bar data={chartData} options={barChartOptions} />;
      case "Doughnut":
        return <Doughnut data={chartData} />;
      default:
        return <Pie data={chartData} />;
    }
  };

  return (
    <div style={{ width: "50%", margin: "auto" }}>
      <h3>Vulnerability Severity Distribution</h3>
      <label htmlFor="chart-type-select">Select Chart Type: </label>
      <select id="chart-type-select" value={chartType} onChange={(e) => setChartType(e.target.value)}>
        <option value="Pie">Pie</option>
        <option value="Bar">Bar</option>
        <option value="Doughnut">Doughnut</option>
      </select>
      {renderChart()}
    </div>
  );
}

export default VulnerabilityChart;
